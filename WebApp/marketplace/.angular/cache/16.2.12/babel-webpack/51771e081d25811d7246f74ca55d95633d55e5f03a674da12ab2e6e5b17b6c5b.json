{"ast":null,"code":"export class PageModel {\n  constructor(items, pageIndex, pageCount) {\n    /**\r\n     * @description Make sure this is always an odd number\r\n     */\n    this.maxPages = 10;\n    this.items = items;\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n  }\n  /**\r\n   * @description Gets at most three next page indexes (only the ones that exists).\r\n   * @returns The next page index from the current index\r\n   */\n  getNextPageIndexes() {\n    if (this.pageIndex <= Math.floor(this.maxPages / 2)) return this.maxPages;\n    return this.pageIndex + Math.floor(this.maxPages / 2) >= this.pageCount ? this.pageCount : this.pageIndex + 4;\n  }\n  /**\r\n   * @description Gets at most three next previous indexes (only the ones that exists).\r\n   * @returns The previous page index from the current index\r\n   */\n  getPreviousPageIndexes() {\n    if (this.pageIndex + Math.floor(this.maxPages / 2) >= this.pageCount) return this.pageCount - this.maxPages; // Ensures to always show maxPages\n    return this.pageIndex <= Math.floor(this.maxPages / 2) ? 0 : this.pageIndex - Math.floor(this.maxPages / 2);\n  }\n}","map":{"version":3,"names":["PageModel","constructor","items","pageIndex","pageCount","maxPages","getNextPageIndexes","Math","floor","getPreviousPageIndexes"],"sources":["C:\\Users\\David Bonilla\\Desktop\\rosen-group assessment\\marketplace-master\\WebApp\\marketplace\\src\\app\\core\\models\\page.model.ts"],"sourcesContent":["export class PageModel<T> {\n    items: Array<T>;\n    nextPageIndex: number;\n    pageCount: number;\n    pageIndex: number;\n    previousPageIndex: number;\n\n    /**\n     * @description Make sure this is always an odd number\n     */\n    private maxPages: number = 10;\n\n    constructor(items: Array<T>, pageIndex: number, pageCount: number){\n        this.items = items;\n        this.pageIndex = pageIndex;\n        this.pageCount = pageCount;\n    }\n\n    /**\n     * @description Gets at most three next page indexes (only the ones that exists).\n     * @returns The next page index from the current index\n     */\n    getNextPageIndexes(){\n        if(this.pageIndex <= Math.floor(this.maxPages / 2)) return this.maxPages\n        return (this.pageIndex + Math.floor(this.maxPages / 2) >= this.pageCount) ? this.pageCount : this.pageIndex + 4\n    }\n\n    /**\n     * @description Gets at most three next previous indexes (only the ones that exists).\n     * @returns The previous page index from the current index\n     */\n    getPreviousPageIndexes(){\n        if(this.pageIndex + Math.floor(this.maxPages / 2) >= this.pageCount) return this.pageCount - this.maxPages // Ensures to always show maxPages\n        return (this.pageIndex <= Math.floor(this.maxPages / 2)) ? 0 : this.pageIndex - Math.floor(this.maxPages / 2)\n    }\n}\n"],"mappings":"AAAA,OAAM,MAAOA,SAAS;EAYlBC,YAAYC,KAAe,EAAEC,SAAiB,EAAEC,SAAiB;IALjE;;;IAGQ,KAAAC,QAAQ,GAAW,EAAE;IAGzB,IAAI,CAACH,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC9B;EAEA;;;;EAIAE,kBAAkBA,CAAA;IACd,IAAG,IAAI,CAACH,SAAS,IAAII,IAAI,CAACC,KAAK,CAAC,IAAI,CAACH,QAAQ,GAAG,CAAC,CAAC,EAAE,OAAO,IAAI,CAACA,QAAQ;IACxE,OAAQ,IAAI,CAACF,SAAS,GAAGI,IAAI,CAACC,KAAK,CAAC,IAAI,CAACH,QAAQ,GAAG,CAAC,CAAC,IAAI,IAAI,CAACD,SAAS,GAAI,IAAI,CAACA,SAAS,GAAG,IAAI,CAACD,SAAS,GAAG,CAAC;EACnH;EAEA;;;;EAIAM,sBAAsBA,CAAA;IAClB,IAAG,IAAI,CAACN,SAAS,GAAGI,IAAI,CAACC,KAAK,CAAC,IAAI,CAACH,QAAQ,GAAG,CAAC,CAAC,IAAI,IAAI,CAACD,SAAS,EAAE,OAAO,IAAI,CAACA,SAAS,GAAG,IAAI,CAACC,QAAQ,EAAC;IAC3G,OAAQ,IAAI,CAACF,SAAS,IAAII,IAAI,CAACC,KAAK,CAAC,IAAI,CAACH,QAAQ,GAAG,CAAC,CAAC,GAAI,CAAC,GAAG,IAAI,CAACF,SAAS,GAAGI,IAAI,CAACC,KAAK,CAAC,IAAI,CAACH,QAAQ,GAAG,CAAC,CAAC;EACjH"},"metadata":{},"sourceType":"module","externalDependencies":[]}