{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.$user = new Subject();\n    const username = localStorage.getItem(\"username\");\n    if (username) {\n      this.getUser(localStorage.getItem(\"username\")).toPromise().then(res => {\n        this.$user.next(res);\n      });\n    }\n  }\n  getUser(username) {\n    return this.http.get(`${environment.apiUrl}User/GetUserByUserName`, {\n      params: {\n        username\n      }\n    });\n  }\n  logIn(username) {\n    localStorage.setItem(\"username\", username);\n    this.getUser(localStorage.getItem(\"username\")).toPromise().then(user => {\n      if (user && user.username) {\n        this.$user.next(user);\n        this.router.navigate([\"/list\"]);\n      } else {\n        alert(\"User \" + username + \" doesn't exist.\");\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n  signUp(username) {\n    return this.http.post(`${environment.apiUrl}User`, {\n      username\n    });\n  }\n  signOut() {\n    this.$user.next(null);\n    localStorage.removeItem(\"username\");\n    this.router.navigate([\"/login\"]);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","environment","AuthService","constructor","http","router","$user","username","localStorage","getItem","getUser","toPromise","then","res","next","get","apiUrl","params","logIn","setItem","user","navigate","alert","catch","e","console","log","signUp","post","signOut","removeItem","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\David Bonilla\\Desktop\\rosen-group assessment\\marketplace-master\\WebApp\\marketplace\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject, of } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { User } from '../models/user.model';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  public $user = new Subject<User | null>();\n  \n  constructor(private http: HttpClient, private router: Router) { \n    const username = localStorage.getItem(\"username\");\n    if(username){\n      this.getUser(localStorage.getItem(\"username\")).toPromise().then((res: User) => {\n        this.$user.next(res)\n      });\n    }\n  }\n\n  getUser(username): Observable<any> {\n    return this.http.get(`${environment.apiUrl}User/GetUserByUserName`, { params: { username } })\n  }\n\n  logIn(username): void{\n    localStorage.setItem(\"username\", username);\n\n    this.getUser(localStorage.getItem(\"username\")).toPromise().then((user: User) => {\n      if(user && user.username){\n        this.$user.next(user)\n        this.router.navigate([\"/list\"]);\n      } else {\n        alert(\"User \" + username  +\" doesn't exist.\")\n      }\n    })\n    .catch(e => {\n      console.log(e);\n    });\n  }\n\n  signUp(username): Observable<any>{\n    return this.http.post(`${environment.apiUrl}User`, {username})\n  }\n\n  signOut(): void{\n    this.$user.next(null);\n    localStorage.removeItem(\"username\");\n    this.router.navigate([\"/login\"]);\n  }\n}\n"],"mappings":"AAEA,SAAsCA,OAAO,QAAY,MAAM;AAC/D,SAASC,WAAW,QAAQ,8BAA8B;;;;AAO1D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAF7C,KAAAC,KAAK,GAAG,IAAIN,OAAO,EAAe;IAGvC,MAAMO,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,IAAGF,QAAQ,EAAC;MACV,IAAI,CAACG,OAAO,CAACF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAACE,SAAS,EAAE,CAACC,IAAI,CAAEC,GAAS,IAAI;QAC5E,IAAI,CAACP,KAAK,CAACQ,IAAI,CAACD,GAAG,CAAC;MACtB,CAAC,CAAC;;EAEN;EAEAH,OAAOA,CAACH,QAAQ;IACd,OAAO,IAAI,CAACH,IAAI,CAACW,GAAG,CAAC,GAAGd,WAAW,CAACe,MAAM,wBAAwB,EAAE;MAAEC,MAAM,EAAE;QAAEV;MAAQ;IAAE,CAAE,CAAC;EAC/F;EAEAW,KAAKA,CAACX,QAAQ;IACZC,YAAY,CAACW,OAAO,CAAC,UAAU,EAAEZ,QAAQ,CAAC;IAE1C,IAAI,CAACG,OAAO,CAACF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAACE,SAAS,EAAE,CAACC,IAAI,CAAEQ,IAAU,IAAI;MAC7E,IAAGA,IAAI,IAAIA,IAAI,CAACb,QAAQ,EAAC;QACvB,IAAI,CAACD,KAAK,CAACQ,IAAI,CAACM,IAAI,CAAC;QACrB,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;OAChC,MAAM;QACLC,KAAK,CAAC,OAAO,GAAGf,QAAQ,GAAG,iBAAiB,CAAC;;IAEjD,CAAC,CAAC,CACDgB,KAAK,CAACC,CAAC,IAAG;MACTC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;IAChB,CAAC,CAAC;EACJ;EAEAG,MAAMA,CAACpB,QAAQ;IACb,OAAO,IAAI,CAACH,IAAI,CAACwB,IAAI,CAAC,GAAG3B,WAAW,CAACe,MAAM,MAAM,EAAE;MAACT;IAAQ,CAAC,CAAC;EAChE;EAEAsB,OAAOA,CAAA;IACL,IAAI,CAACvB,KAAK,CAACQ,IAAI,CAAC,IAAI,CAAC;IACrBN,YAAY,CAACsB,UAAU,CAAC,UAAU,CAAC;IACnC,IAAI,CAACzB,MAAM,CAACgB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAAC,QAAAU,CAAA,G;qBAxCU7B,WAAW,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXpC,WAAW;IAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}