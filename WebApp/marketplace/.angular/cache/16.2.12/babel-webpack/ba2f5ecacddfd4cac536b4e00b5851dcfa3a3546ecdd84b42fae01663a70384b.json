{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nclass PermissionsService {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(next, state) {\n    const authService = inject(AuthService);\n    const router = inject(Router);\n    return authService.$user.asObservable().pipe(map(user => user.id ? true : false), catchError(() => {\n      router.navigate(['/login']);\n      return of(false);\n    }));\n  }\n  static #_ = this.ɵfac = function PermissionsService_Factory(t) {\n    return new (t || PermissionsService)(i0.ɵɵinject(i1.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PermissionsService,\n    factory: PermissionsService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport const canActivate = (next, state) => {\n  return inject(PermissionsService).canActivate(next, state);\n};","map":{"version":3,"names":["inject","Router","AuthService","of","catchError","map","PermissionsService","constructor","router","canActivate","next","state","authService","$user","asObservable","pipe","user","id","navigate","_","i0","ɵɵinject","i1","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\David Bonilla\\Desktop\\rosen-group assessment\\marketplace-master\\WebApp\\marketplace\\src\\app\\core\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\r\nimport {  ActivatedRouteSnapshot, CanActivateFn, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { User } from '../models/user.model';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  class PermissionsService {\r\n  \r\n    constructor(private router: Router) {}\r\n  \r\n    canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n        const authService = inject(AuthService);\r\n        const router = inject(Router);\r\n\r\n        return authService.$user.asObservable().pipe(\r\n            map((user: User) => user.id ? true : false),\r\n            catchError(() => {\r\n                router.navigate(['/login']);\r\n                return of(false);\r\n            })\r\n        )\r\n    }\r\n  }\r\n  \r\n  export const canActivate: CanActivateFn = (next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> => {\r\n    return inject(PermissionsService).canActivate(next, state);\r\n  }"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SAAiDC,MAAM,QAA6B,iBAAiB;AACrG,SAASC,WAAW,QAAQ,0BAA0B;AAEtD,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAEhD,MAGQC,kBAAkB;EAEtBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAErCC,WAAWA,CAACC,IAA4B,EAAEC,KAA0B;IAChE,MAAMC,WAAW,GAAGZ,MAAM,CAACE,WAAW,CAAC;IACvC,MAAMM,MAAM,GAAGR,MAAM,CAACC,MAAM,CAAC;IAE7B,OAAOW,WAAW,CAACC,KAAK,CAACC,YAAY,EAAE,CAACC,IAAI,CACxCV,GAAG,CAAEW,IAAU,IAAKA,IAAI,CAACC,EAAE,GAAG,IAAI,GAAG,KAAK,CAAC,EAC3Cb,UAAU,CAAC,MAAK;MACZI,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAC3B,OAAOf,EAAE,CAAC,KAAK,CAAC;IACpB,CAAC,CAAC,CACL;EACL;EAAC,QAAAgB,CAAA,G;qBAfGb,kBAAkB,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAArB,MAAA;EAAA;EAAA,QAAAsB,EAAA,G;WAAlBjB,kBAAkB;IAAAkB,OAAA,EAAlBlB,kBAAkB,CAAAmB,IAAA;IAAAC,UAAA,EAFV;EAAM;;AAoBpB,OAAO,MAAMjB,WAAW,GAAkBA,CAACC,IAA4B,EAAEC,KAA0B,KAAyB;EAC1H,OAAOX,MAAM,CAACM,kBAAkB,CAAC,CAACG,WAAW,CAACC,IAAI,EAAEC,KAAK,CAAC;AAC5D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}